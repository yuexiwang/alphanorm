library("alphanorm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
source('~/Dropbox/ProximalAlgorithm/Rcode/code_final/ThreePassTable_v8.R', echo=TRUE)
source('~/Dropbox/ProximalAlgorithm/Rcode/code_final/Figure2.R', echo=TRUE)
source('~/Dropbox/ProximalAlgorithm/Rcode/code_final/Figure2.R', echo=TRUE)
alphanorm(X,Y,lambda[i],q=alpha[j],intercept = FALSE,tol=Tol,T=P[p]*5)
Beta[i,,j,p] = alphanorm(X,Y,lambda[i],q=alpha[j],intercept = FALSE,tol=Tol,T=P[p]*5)$Coefficient
source('~/Dropbox/ProximalAlgorithm/Rcode/code_final/Figure2.R', echo=TRUE)
source('~/Dropbox/ProximalAlgorithm/Rcode/code_final/testError_v2.R', echo=TRUE)
source('~/Dropbox/ProximalAlgorithm/Rcode/code_final/alpha_norm_boot.R', echo=TRUE)
getwd()
source("TwpPassTable.R")
source("TwoPassTable.R")
source("TwoPassTable.R")
library("foreign")
library("gdata")
# read the marketing data
SS <- read.dta("saltysnack_store_info_1.dta")
# read predictors
SS$p_id <- as.factor(SS$upc)
SS$iri_key <- as.factor(SS$iri_key)
SS$year<-as.factor(SS$year)
# divide weeks by year
SS$week <- SS$week%%52
SS$week<-as.factor(SS$week)
SS$producttype <- factor(SS$producttype)
SS$package <- factor(SS$package)
SS$flavorscent <- factor(SS$flavorscent)
SS$fatcontent <- factor(SS$fatcontent)
SS$cookingmethod <- factor(SS$cookingmethod)
SS$saltsodiumcontent <- factor(SS$saltsodiumcontent)
SS$typeofcut <- factor(SS$typeofcut)
SS$pr <- factor(SS$pr)
SS$f <- factor(SS$f)
SS$d <- factor(SS$d)
SS$brand <- factor(SS$l5)
SS$logprice<-log(SS$price)
SS$logunits<-log(SS$units)
# choose the predictors we want
pred_select<-c("logprice","vol_eq","pr","f","d","producttype","package","brand","flavorscent","fatcontent","cookingmethod","saltsodiumcontent","typeofcut","week")#iri_key")
X<-subset(SS,select=pred_select)
X<-model.matrix(~.-1,X)
Y<-SS$logunits
trainData = data.frame(Y, X)
testData = data.frame(Y, X)
numCV <- 5
numTune <- 10
numRepeats<-1
## For the method mentioned in the model, we need to partition the data into three parts:
methodList<-c("lm")
#c("lm","glmboost","rf","svm","stagewise","stepwise","lasso","ridge")
Summary_Table<-TwoPass_Table(trainData,
testData,
methodList,
numCV,
numRepeats,
numTune,
bench=FALSE
#numTrue=K
)
J.change.max
k
Time
J.change
r.change
source("LalphaCD_v2.R")
source("TwoPassTable.R")
Summary_Table<-TwoPass_Table(trainData,
testData,
methodList,
numCV,
numRepeats,
numTune,
bench=FALSE
#numTrue=K
)
r
y
detach("package:alphanorm", unload=TRUE)
Summary_Table<-TwoPass_Table(trainData,
testData,
methodList,
numCV,
numRepeats,
numTune,
bench=FALSE
#numTrue=K
)
source("TwoPassTable.R")
Summary_Table<-TwoPass_Table(trainData,
testData,
methodList,
numCV,
numRepeats,
numTune,
bench=FALSE
#numTrue=K
)
z.initial.max
is.nan(x)
sum(is.nana(x))
sum(is.nan(x))
source("TwoPassTable.R")
source("TwoPassTable.R")
Summary_Table<-TwoPass_Table(trainData,
testData,
methodList,
numCV,
numRepeats,
numTune,
bench=FALSE
#numTrue=K
)
z.initial.max
source("TwoPassTable.R")
source("TwoPassTable.R")
Summary_Table<-TwoPass_Table(trainData,
testData,
methodList,
numCV,
numRepeats,
numTune,
bench=FALSE
#numTrue=K
)
source("TwoPassTable.R")
Summary_Table<-TwoPass_Table(trainData,
testData,
methodList,
numCV,
numRepeats,
numTune,
bench=FALSE
#numTrue=K
)
Summary_Table<-TwoPass_Table(trainData,
testData,
methodList,
numCV,
numRepeats,
numTune,
bench=FALSE
#numTrue=K
)
source("TwoPassTable.R")
Summary_Table<-TwoPass_Table(trainData,
testData,
methodList,
numCV,
numRepeats,
numTune,
bench=FALSE
#numTrue=K
)
source("TwoPassTable.R")
Summary_Table<-TwoPass_Table(trainData,
testData,
methodList,
numCV,
numRepeats,
numTune,
bench=FALSE
#numTrue=K
)
setwd("~/GitHub/alphanorm/")
library(alphanorm)
library(alphanorm)
library(alphanorm)
library(alphanorm)
detach("package:alphanorm", unload=TRUE)
remove.packages("alphanorm")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install_git("git@github.com:yxwang99/alphanorm.git")
library("alphanorm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(alphanorm)
remove.packages("alphanorm")
install_git("git@github.com:yxwang99/alphanorm.git")
library("alphanorm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
getwd()
setwd("~")
remove.packages("alphanorm")
install_git("git@github.com:yxwang99/alphanorm.git")
library(devtools)
install_git("git@github.com:yxwang99/alphanorm.git")
library("alphanorm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
